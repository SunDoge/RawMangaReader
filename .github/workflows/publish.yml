name: "publish"
on:
  # release:
  #   types: [published]
  push:
    tags:
      - "v*" # push match v0.1.0, v1.0
  workflow_dispatch:

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
          version: 1.0

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "pnpm"
      - name: install frontend dependencies
        run: pnpm install # change this to npm or pnpm depending on which one you use

      - name: Cache onnxruntime file
        uses: actions/cache@v3
        with:
          path: onnxruntime.*
          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
      - name: donwload onnxruntime
        run: pnpm run download_dylib

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: "${{ github.ref_name }}" # the action automatically replaces \_\_VERSION\_\_ with the app version
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: false
          prerelease: false
